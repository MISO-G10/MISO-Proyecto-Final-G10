name: Despliegue Backend

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Usar las variables definidas a nivel de repositorio o de organización
    env:
      FRONTEND_URL: ${{ vars.FRONTEND_URL }}

    steps:
      - name: Checkout code (opcional para logs)
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCE_HOST }} >> ~/.ssh/known_hosts

      - name: Despliegue a GCP
        run: |
          # Se guarda la variable FRONTEND_URL temporalmente en el servidor
          echo "$FRONTEND_URL" | ssh -o StrictHostKeyChecking=no ${{ secrets.GCE_USER }}@${{ secrets.GCE_HOST }} "cat > ~/frontend_url.txt"
          
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCE_USER }}@${{ secrets.GCE_HOST }} << 'EOF'
            set -e
            cd ~/MISO-Proyecto-Final-G10
            git pull origin master
            cd Backend
            
            # Se lee la variable almacenada y se crea un script temporal para actualizar el dockerfile con este nuevo valor
            FRONTEND_URL=$(cat ~/frontend_url.txt)
            
            cat > update_cors.sh << 'SCRIPT'
            #!/bin/bash
            # Obtener la URL del frontend
            FRONTEND_URL="$1"
            
            # Método usando awk para detectar y actualizar todos los servicios
            awk -v url="$FRONTEND_URL" '
            /FRONTEND_URL:/ {
              # Reemplazar la línea con la nueva URL
              print "      FRONTEND_URL: " url
              next
            }
            # Imprimir todas las demás líneas sin cambios
            { print }
            ' docker-compose.yml > docker-compose.yml.new
            
            # Reemplazar el archivo original
            mv docker-compose.yml.new docker-compose.yml
            SCRIPT
            
            # Se ejecuta el script con la URL del frontend
            chmod +x update_cors.sh          
            ./update_cors.sh "$FRONTEND_URL"
            
            # Se muestran los cambios para verificación
            echo "Cambios realizados en docker-compose.yml:"
            grep -A 1 "FRONTEND_URL:" docker-compose.yml
            
            # Se detienen y se reconstruyen los contenedores
            docker-compose down
            docker-compose up -d --build
            
            # Limpiar archivos temporales
            rm ~/frontend_url.txt update_cors.sh
          EOF
